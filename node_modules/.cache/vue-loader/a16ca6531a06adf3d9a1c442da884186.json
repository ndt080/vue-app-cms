{"remainingRequest":"D:\\=FILES=\\Projects\\WEB\\VueApp\\vue-app-cms\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\=FILES=\\Projects\\WEB\\VueApp\\vue-app-cms\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\=FILES=\\Projects\\WEB\\VueApp\\vue-app-cms\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\=FILES=\\Projects\\WEB\\VueApp\\vue-app-cms\\src\\components\\Nav.vue?vue&type=template&id=65af85a3&scoped=true&","dependencies":[{"path":"D:\\=FILES=\\Projects\\WEB\\VueApp\\vue-app-cms\\src\\components\\Nav.vue","mtime":1597931248736},{"path":"D:\\=FILES=\\Projects\\WEB\\VueApp\\vue-app-cms\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\=FILES=\\Projects\\WEB\\VueApp\\vue-app-cms\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\=FILES=\\Projects\\WEB\\VueApp\\vue-app-cms\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\=FILES=\\Projects\\WEB\\VueApp\\vue-app-cms\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\=FILES=\\Projects\\WEB\\VueApp\\vue-app-cms\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\=FILES=\\Projects\\WEB\\VueApp\\vue-app-cms\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\=FILES=\\Projects\\WEB\\VueApp\\vue-app-cms\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\=FILES=\\Projects\\WEB\\VueApp\\vue-app-cms\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}